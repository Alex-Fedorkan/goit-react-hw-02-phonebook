{"version":3,"sources":["context/contactsContext.js","components/ContactForm/ContactForm.js","components/ContactList/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["createContext","ContactForm","handleFormSubmit","initialValues","name","number","validationSchema","Yup","required","matches","onSubmit","autoComplete","htmlFor","type","ContactItem","id","contactsContext","Consumer","deleteContact","onClick","ContactList","contacts","map","Filter","value","handleInputChange","onChange","App","state","filter","contactId","setState","prevState","contact","addNewContact","setSubmitting","resetForm","find","toLowerCase","alert","uuidv4","handleFindInputChange","event","currentTarget","getVisibleContacts","includes","Provider","this","className","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.240d7137.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport default createContext();\r\n","import { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactForm = ({ handleFormSubmit }) => {\r\n  const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ name: '', number: '' }}\r\n      validationSchema={Yup.object({\r\n        name: Yup.string().required('Required'),\r\n        number: Yup.string()\r\n          .matches(phoneRegExp, 'Phone number is not valid')\r\n          .required('Required'),\r\n      })}\r\n      onSubmit={handleFormSubmit}\r\n    >\r\n      <Form autoComplete=\"off\">\r\n        <label htmlFor=\"name\">Name</label>\r\n        <Field name=\"name\" type=\"text\" />\r\n        <ErrorMessage name=\"name\" />\r\n        <label htmlFor=\"number\">Number</label>\r\n        <Field name=\"number\" type=\"text\" />\r\n        <ErrorMessage name=\"number\" />\r\n        <button type=\"submit\">Add contact</button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  handleFormSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport contactsContext from '../../../context/contactsContext';\r\n\r\nconst ContactItem = ({ id, name, number }) => {\r\n  return (\r\n    <li>\r\n      {name}: {number}\r\n      <contactsContext.Consumer>\r\n        {({ deleteContact }) => (\r\n          <button type=\"button\" onClick={() => deleteContact(id)}>\r\n            Delete\r\n          </button>\r\n        )}\r\n      </contactsContext.Consumer>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import PropTypes from 'prop-types';\r\nimport ContactItem from './ContactItem/ContactItem';\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <ContactItem key={id} id={id} name={name} number={number} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({ id: PropTypes.string.isRequired }),\r\n  ).isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, handleInputChange }) => {\r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input type=\"text\" value={value} onChange={handleInputChange} />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  handleInputChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\nimport contactsContext from './context/contactsContext';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n    deleteContact: contactId => {\n      this.setState(prevState => ({\n        contacts: prevState.contacts.filter(\n          contact => contact.id !== contactId,\n        ),\n      }));\n    },\n  };\n\n  addNewContact = ({ name, number }, { setSubmitting, resetForm }) => {\n    if (\n      this.state.contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n      resetForm({ name, number });\n      setSubmitting(false);\n      return;\n    }\n\n    this.setState(prevState => {\n      const contacts = [...prevState.contacts, { id: uuidv4(), name, number }];\n\n      return { ...prevState, contacts };\n    });\n\n    resetForm({ name, number });\n    setSubmitting(false);\n  };\n\n  handleFindInputChange = event => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  render() {\n    return (\n      <contactsContext.Provider value={this.state}>\n        <div className=\"App\">\n          <h1>Phonebook</h1>\n          <ContactForm handleFormSubmit={this.addNewContact} />\n          <h2>Contacts</h2>\n          <Filter\n            value={this.filter}\n            handleInputChange={this.handleFindInputChange}\n          />\n          <ContactList contacts={this.getVisibleContacts()} />\n        </div>\n      </contactsContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}